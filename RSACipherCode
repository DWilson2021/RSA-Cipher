import java.io.*;
import java.util.*;
public class Main {
// Asks the user to provide a message.
    public static void main(String []args) 
    {
        Scanner system = new Scanner(System.in);
        System.out.println("Please enter your message:");
        String message = system.nextLine();
        generateKey(message);
    }
// Generates the key and prints out the plaintext, public key, ciphertext, and private key.
    public static void generateKey(String m) 
    {
        Random rand = new Random();
        int POne = rand.nextInt(100)+2;
        int PTwo = rand.nextInt(100)+2;
        boolean prime = false;
        while (prime == false) {
            if(isPrime(POne) == false) {
                POne =  rand.nextInt(100)+2;
            }
            if(isPrime(PTwo) == false) {
                PTwo =  rand.nextInt(100)+2;
            }
            if(isPrime(POne) == true && isPrime(PTwo) == true && POne != PTwo) {
                prime = true;
            }
        }
        System.out.println("POne = "+POne);
        System.out.println("PTwo = "+PTwo);
        int N = POne * PTwo;
        int p = (POne - 1) * (PTwo - 1);
        System.out.println("N = "+N);
        System.out.println("p = "+p);
        int e = 1;
        int d = 1;
        boolean keyGather = false;
        while (keyGather == false) {
            for (int j = 2; j < p; j++) {
                if (isRelativelyPrime(j, p)) {
                    e = j;
                    break;
                }
            }
            for (int i = 1; i < p; i++) {
                if ((e * i) % p == 1) {
                    d = i;
                    keyGather = true;
                    break;
                }
            }
        }
        int[] asciiInput = new int[m.length()];
        int[] C = new int[m.length()];
        int[] D = new int[m.length()];
        StringBuilder  textCipher = new StringBuilder();
        StringBuilder  textDecoded = new StringBuilder();
        for (int g = 0; g < m.length(); g++) {
            asciiInput[g] = (int) m.charAt(g);
        }
        for (int g = 0; g < m.length(); g++) {
            C[g] = modularExponentiation(asciiInput[g], e, N);
            textCipher.append(C[g]).append(" ");
        }
        for (int g = 0; g < m.length(); g++) {
            D[g] = modularExponentiation(C[g], d, N);
            textDecoded.append((char) D[g]).append(" ");
        }
        System.out.println("Your message is: " + m);
        System.out.println("Public Key: (" + N + ", " + e + ")");
        System.out.println("Encrypt message: " + textCipher.toString());
        System.out.println("Private Key: (" + N + ", " + d + ")");
        System.out.println("Decrypt message: " + textDecoded.toString());
    }
// Encrypts and decrypts the message.
    public static int modularExponentiation(int b, int e, int m) 
    {
        int result = 1;
        b = b % m;
        while (e > 0) {
            if (e % 2 == 1) {
                result = (result * b) % m;
            }
            b = (b * b) % m;
            e = e / 2;
        }
        return result;
    }
  //Checks to see if both int varibles are relatively prime.
    public static boolean isRelativelyPrime(int n, int m) 
    {
        int[] num1 = new int[n];
        int[] num2 = new int[m];
        int h = 1;
        for(int i = 1; i < (n+1); i++) {
            if(n % i == 0) {
                num1[i-1] = i;
            } else {
                num1[i-1] = 0;
            }
        }
        for(int i = 1; i < (m+1); i++) {
            if(m % i == 0) {
                num2[i-1] = i;
            } else {
                num2[i-1] = 0;
            }
        }
        for(int j = 0; j < n; j++) {
            if(num1[j] != 0) {
                for(int k = 0; k < m; k++) {
                    if(num1[j] == num2[k]) {
                        h = num1[j];
                    }
                }
            }
        }
        if(h == 1) {
            return true;
        } else {
            return false;
        }
    }
// Checks to see if int varible is prime.
    public static boolean isPrime(int n) 
    {
        for(int i = 1; i < (n+1); i++) {
            if(n % i == 0 && i != 1 && i != n) {
                return false;
            }
        }
        return true;
    }
}

